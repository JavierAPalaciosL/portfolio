import {AfterViewInit, Component, signal, WritableSignal} from '@angular/core';
import Project from './core/Project';
import ProjectSelected from './core/ProjectSelected';

@Component({
  selector: 'app-root',
  templateUrl: './app.html',
  standalone: false,
  styleUrl: './app.css'
})
export class App implements AfterViewInit {
  protected readonly title = signal('Javier Palacios');
  public projects: Project[];
  isVisible: WritableSignal<boolean> = signal(false);
  projectSelected: WritableSignal<Project> = signal({title: "A", image: "A", description: "A", xp: "", carrusel: [""], mainCharacteristics: [""],  stackTecnologies: [""], icons: [""], stackWithIcons: [{uriIcon : "", name : ""}], repositoryWithIcons: [{uriIcon: "", name: "", url: ""}]});

  public myStack: {
    icon: string;
    name: string;
  }[] = [
    {
      icon: "icons/spring.svg",
      name: "Spring Boot"
    },
    {
      icon: "icons/angular.svg",
      name: "Angular"
    },
    {
      icon: "icons/java8.svg",
      name: "Java"
    },
    {
      icon: "icons/docker.svg",
      name: "Docker"
    },
    {
      icon: "icons/git.svg",
      name: "Git"
    },
    {
      icon: "icons/swagger.svg",
      name: "Swagger"
    },
    {
      icon: "icons/maven.svg",
      name: "Maven"
    },
    {
      icon: "icons/tailwind.svg",
      name: "Tailwind"
    },
    {
      icon: "icons/css.svg",
      name: "CSS"
    },
    {
      icon: "icons/posgrest.svg",
      name: "PostgreSQL"
    },
    {
      icon: "icons/maria.svg",
      name: "MariaDB"
    },
    {
      icon: "icons/oauth.svg",
      name: "OAuth 2.0"
    },
    {
      icon: "icons/JWT.svg",
      name: "JWT"
    },

    {
      icon: "icons/ts.svg",
      name: "TypeScript"
    },

    {
      icon: "icons/github.svg",
      name: "GitHub"
    },

    {
      icon: "icons/tux.svg",
      name: "Linux"
    },

  ];

  public works: {
    corporation: string;
    position: string;
    description: string;
    date: string;
  }[] = [
    {
      corporation: "Sintergica AI",
      position: "Desarrollador Backend",
      description: "En Sintergica AI, entre enero y junio de 2025, form√© parte de un equipo multidisciplinar dedicado al desarrollo de copilotos de IA soberana y privada para empresas y gobiernos de LATAM, centrando mi labor en el backend con Spring Boot, donde implement√© mecanismos de seguridad basados en JWT, dise√±√©, constru√≠ y document√© APIs REST robustas utilizando Swagger/OpenAPI para generar especificaciones interactivas y clientes automatizados que facilitaron la integraci√≥n de otros equipos y clientes, model√© y gestion√© la base de datos SQL, desplegu√© las aplicaciones con Docker, configur√© pipelines de CI/CD en GitHub Actions (aprendido de forma autodidacta), trabaj√© colaborativamente con Git y GitHub empleando Spring Data JPA como ORM, contribu√≠ a la calidad del c√≥digo mediante pruebas unitarias bajo un enfoque TDD con Mockito y valid√© mis endpoints con Postman para asegurar su correcto funcionamiento antes del despliegue.\n",
      date: "Ene 2025 ‚Äì Jul 2025"
    },
    {
      corporation: "Tecnol√≥gico de Veracruz",
      position: "Investigador y desarrollador de software",
      description: "En este proyecto, como investigador, explor√© y apliqu√© de forma aut√≥noma patrones de dise√±o y estructuras de datos complejas para la interfaz gr√°fica. Aprend√≠ a desarrollar componentes 2D personalizados desde cero y a implementar el patr√≥n MVC en entornos de escritorio con Java Swing, gestionando la l√≥gica de estado y el renderizado en tiempo real. Colabor√© en el dise√±o de la arquitectura y el modelado de una m√°quina de Turing est√°ndar, combinando programaci√≥n orientada a objetos y manejo de eventos en Swing. Adem√°s, particip√© activamente en reuniones de seguimiento, definiendo y cumpliendo plazos de entrega con responsabilidad y disciplina en todas las fases del desarrollo.\n",
      date: "Ene 2024 ‚Äì Dic 2024"
    },
    {
      corporation: "Freelancer",
      position: "Desarrollador de software",
      description: "Como freelancer, entre enero y abril de 2023, dise√±√© y desarroll√© un sistema personalizado para pediatras con m√≥dulos de gesti√≥n de pacientes para consultorios m√©dicos. Model√© la base de datos SQL y la conect√© manualmente mediante JDBC, implementando consultas CRUD y control de transacciones para garantizar la integridad de los datos. En Java Swing, cre√© interfaces gr√°ficas intuitivas y estructur√© toda la aplicaci√≥n con el patr√≥n MVC, organizando los m√≥dulos de pacientes, citas e historiales. Adem√°s, implement√© validaciones y reglas de negocio en Java, y gestion√© eventos y la navegaci√≥n entre pantallas para ofrecer una experiencia de usuario fluida y confiable.\n",
      date: "Ene 2023 ‚Äì Abr 2023"
    },
  ];


  constructor() {
    this.projects = [
      {
        title: "RadioWeatherAPI",
        description: "Aplicaci√≥n web construida con arquitectura hexagonal (puertos y adaptadores) que orquesta de manera inteligente m√∫ltiples fuentes de datos: consulta la API de OpenWeather para mostrar el clima de cualquier ubicaci√≥n y, cuando existen emisoras en el pa√≠s seleccionado, despliega al instante la lista de estaciones de RadioBrowser correspondientes. Para enriquecer la navegaci√≥n geogr√°fica, integra OpenLeaflet para mapas interactivos y aprovecha de modo creativo los mapas SVG de Wikimedia Commons v√≠a la API de Wikipedia. Adem√°s, asegura autenticaci√≥n robusta con OAuth 2.0 de Google e implementa JWT para ofrecer una API stateless. Para maximizar velocidad y autonom√≠a, incorpora localmente m√°s de 150 000 registros importados v√≠a pgAdmin/psql, lo que garantiza respuestas ultrarr√°pidas sin saturar las APIs externas. El resultado es una plataforma √°gil, coherente y siempre disponible, dise√±ada para ofrecer al usuario una experiencia fluida y sin interrupciones.",
        image: "https://drive.google.com/file/d/14fF7j13D0GNJnx3lgow6FCYJ3KW8WfKl/preview",
        mainCharacteristics: [

          "üöÄ Respuesta ultrarr√°pida gracias a m√°s de 150 000 registros importados localmente\n",
          "üîÑ Flujo de autenticaci√≥n OAuth 2.0 con Google para inicios de sesi√≥n seguros\n",
          "üîê API stateless mediante JSON Web Tokens (JWT)\n",
          "üõ†Ô∏è Arquitectura Hexagonal (puertos y adaptadores) para m√°xima escalabilidad\n",
          "‚òÅÔ∏è Integraci√≥n en tiempo real con OpenWeather API\n" ,
          "üìª Descubrimiento instant√°neo de estaciones via RadioBrowser API\n",
          "üó∫Ô∏è Mapas interactivos con OpenLeaflet y mapas SVG de Wikimedia Commons\n",
          "üìÑ Paginaci√≥n slice para una navegaci√≥n ligera y fluida\n",
          "üóÑÔ∏è Gesti√≥n de persistencia con JPA e Hibernate para un mapeo objeto-relacional robusto\n",
          "üê≥ Contenerizaci√≥n con Docker para despliegues consistentes y aislados\n",
          "üîß Configuraci√≥n din√°mica mediante variables de entorno para adaptar entornos sin cambios de c√≥digo"
        ],
        xp: "Durante el desarrollo de RadioWeatherAPI profundic√© en el flujo de autorizaci√≥n OAuth 2.0 de Google, entendiendo cada paso para obtener tokens de forma segura; al mismo tiempo, implement√© JSON Web Tokens (JWT) para dise√±ar una API completamente stateless y escalable. Apliqu√© los principios de la arquitectura hexagonal, definiendo puertos y adaptadores que facilitan la mantenibilidad y permiten integrar con flexibilidad tanto OpenWeather como RadioBrowser, orquestando llamadas concurrentes y gestionando latencias y errores. Para el acceso a datos, configur√© JPA con Hibernate, asegurando un mapeo eficiente entre objetos y tablas, y en paralelo import√© m√°s de 150 000 registros en PostgreSQL, optimizando la entrega con paginaci√≥n slice y reduciendo significativamente los tiempos de respuesta. Adem√°s, contenedoric√© la aplicaci√≥n con Docker y gestion√© la configuraci√≥n mediante variables de entorno, lo que me permiti√≥ desplegar de forma reproducible y adaptar par√°metros sin modificar el c√≥digo. Por √∫ltimo, enriquec√≠ la interfaz incorporando mapas interactivos con OpenLeaflet y SVG de Wikimedia Commons, mientras afinaba mis habilidades en pgAdmin/psql para consultas masivas que garantizan alta disponibilidad y consistencia.",
        carrusel: ["radioweatherapi/endRadio1.png", "radioweatherapi/endRadio2.png", "radioweatherapi/endRadio4.png", "radioweatherapi/endRadio5.png", "radioweatherapi/endRadio6.png", "radioweatherapi/endRadio7.png", "radioweatherapi/endRadio8.png", "radioweatherapi/endRadio9.png", "radioweatherapi/endRadio10.png"],
        stackTecnologies: ["Angular"],
        icons: ["icons/oauth.svg"],
        stackWithIcons: [
          {uriIcon : "icons/angular.svg", name : "Angular"},
          {uriIcon: "icons/spring.svg", name: "Spring Boot"},
          {uriIcon: "icons/oauth.svg", name: "OAuth 2.0"},
          {uriIcon: "icons/posgrest.svg", name: "Posgrest SQL"},
          {uriIcon: "icons/JWT.svg", name: "JWT"},
          {uriIcon: "icons/swagger.svg", name: "Swagger"},
          {uriIcon: "icons/java8.svg", name: "Java"},
          {uriIcon: "icons/ts.svg", name: "TypeScript"},
          {uriIcon: "icons/tailwind.svg", name: "Tailwind"},
          {uriIcon: "icons/css.svg", name: "CSS"},
          {uriIcon: "icons/git.svg", name: "Git"},
          {uriIcon: "icons/docker.svg", name: "Docker"},
        ],

        repositoryWithIcons: [
          {uriIcon: "octocat.svg", name: "Frontend Angular", url: "https://github.com/JavierAPalaciosL/radio-angular-frontend.git"},
          {uriIcon: "octocat.svg", name: "Backend Spring boot", url: "https://github.com/JavierAPalaciosL/radio-angular-frontend.git"}
        ]
      },
      {
        title: "Java Swing 2D y Estructuras de Datos",
        description: "Descubre en esta aplicaci√≥n de escritorio Java c√≥mo los principios de la inteligencia artificial cobran vida al encontrar la ruta m√°s corta: cada nodo, cada arista y toda la l√≥gica del grafo han sido programados desde cero, sin recurrir a ArrayList ni librer√≠as externas. Observa paso a paso el funcionamiento del algoritmo de Dijkstra, optimizado y transparente, y aprende de su mec√°nica interna mientras experimentas con tus propios grafos. ¬°Una herramienta ligera, educativa y handcrafted para dominar caminos y estructuras de datos!",
        image: "https://drive.google.com/file/d/1deC8m3pZjYfLPvuoVlpxL1vHoyL_drDT/preview",
        mainCharacteristics: [
          "üß© Estructuras de datos handcrafted: listas y grafos programados desde cero",
          "üéÆ Interfaz interactiva con Java Swing 2D para visualizaci√≥n en tiempo real",
          "üó∫Ô∏è Implementaci√≥n transparente del algoritmo de Dijkstra para rutas √≥ptimas",
          "üö´ Sin librer√≠as externas: todo c√≥digo en puro Java para profundizar en fundamentos",
          "‚öôÔ∏è Optimizaci√≥n manual de memoria y rendimiento para una app ligera",
          "üîÑ Grafos din√°micos: En tiempo real se hacen los calculos para el nuevo grafo y se eliminan, modifican nodos y aristas sobre la marcha"
        ],
        xp: "Durante este proyecto consolid√© mi dominio de estructuras de datos al programar listas y grafos desde cero, sin apoyarme en colecciones predefinidas, lo que me permiti√≥ comprender a fondo la l√≥gica de los algoritmos y adaptar r√°pidamente esas soluciones a cualquier lenguaje de programaci√≥n. Profundic√© en el funcionamiento interno del algoritmo de Dijkstra, entendiendo c√≥mo se calculan y actualizan los pesos en cada paso. Adem√°s, reforc√© mis habilidades en Java Swing 2D, gestionando el ciclo de eventos, el pintado de componentes y la sincronizaci√≥n de animaciones. Gracias a esta experiencia, aprend√≠ a optimizar manualmente el uso de memoria y a dise√±ar una arquitectura clara y mantenible, siempre con un enfoque en el rendimiento y la transparencia del c√≥digo.\n",
        carrusel: [
          "pacman.png",
          "pacman/pacmanI1.png"
        ],
        stackTecnologies: [
          "Java Swing",
          "Java 2D",
          "Puro Java"
        ],
        icons: [
          "icons/java.svg",
          "icons/swing.svg"
        ],
        stackWithIcons: [
          {
            uriIcon: "icons/java8.svg",
            name: "Java"
          },
          {
            uriIcon: "icons/java.svg",
            name: "Java Swing"
          }
        ],
        repositoryWithIcons: [
          {
            uriIcon: "octocat.svg",
            name: "Pacman Swing 2D",
            url: "https://github.com/JavierAPalaciosL/pacman-swing-2d.git"
          }
        ]
      },
      {
        title: "Custom Language Compiler (JavaCC & x86-64 Assembly)",
        description: "Este proyecto demuestra la creaci√≥n de un compilador completo para un lenguaje C‚Äìlike, partiendo del an√°lisis l√©xico y sint√°ctico con JavaCC y generando ensamblador x86-64 a mano. Cada fase (lexer, parser, generaci√≥n de AST, traducci√≥n a asm) fue desarrollada desde cero; luego ensambl√© y vincul√© con NASM y GCC para obtener binarios ejecutables. Un trabajo de ingenier√≠a complejo que solo un especialista podr√≠a abordar exitosamente.",
        image: "https://drive.google.com/file/d/1POhSQ9Za-BQyy8GaOvZiV97Hbm9I8yYV/preview",
        mainCharacteristics: [
          "üõ†Ô∏è Desarrollo integral de compilador: desde la gram√°tica JavaCC hasta el assembly final",
          "üìú Gram√°tica hand-crafted en Analex.jj con acciones sem√°nticas para AST",
          "‚öôÔ∏è Generaci√≥n manual de x86-64 asm optimizado, sin plantillas externas",
          "üöÄ Ensamblado y linking con NASM y GCC (-no-pie) para ejecutables nativos",
          "üîç Soporte de estructuras de control (if, while) y operaciones aritm√©ticas",
          "üîÑ Manejo de cadena de tokens, √°rbol de sintaxis y recorrido sem√°ntico completo",
          "üîê Pruebas con ejemplos reales (hola.txt) garantizan robustez y precisi√≥n"
        ],
        xp: "Al dise√±ar este compilador consolid√© mi experiencia en an√°lisis de lenguaje y bajo nivel: domin√© JavaCC para definir gram√°ticas y acciones sem√°nticas, constru√≠ ASTs y gener√© ensamblador x86-64 puro sin apoyo de librer√≠as, y afin√© mi entendimiento del calling convention System V AMD64. Adem√°s, orquest√© el ensamblado con NASM y el linking con GCC, comprobando cada paso para asegurar c√≥digo nativo eficiente. Este proyecto es una prueba irrefutable de mi capacidad para abordar sistemas complejos donde la mayor√≠a de los desarrolladores no se atreven. Adem√°s aprend√≠ c√≥mo funcionan internamente los lenguajes de programaci√≥n. Tambi√©n descubr√≠ que puedo combinar C o Rust en un mismo proyecto para aprovechar las ventajas de cada uno, ya que, al final, todos se traducen a c√≥digo ensamblador.",
        carrusel: [
          "compiler/img_3.png",
          "compiler/img.png",
          "compiler/img_1.png",
          "compiler/img_4.png",
          "compiler/img_2.png"
        ],
        stackTecnologies: [
          "JavaCC 7.0.13",
          "Java",
          "NASM",
          "GCC",
          "x86-64 Assembly"
        ],
        icons: [
          "icons/javacc.svg",
          "icons/nasm.svg",
          "icons/gcc.svg"
        ],
        stackWithIcons: [
          { uriIcon: "icons/nasm.svg", name: "NASM" },
          { uriIcon: "icons/java8.svg", name: "Java" },
          { uriIcon: "icons/gcc.svg", name: "GCC" },
        ],
        repositoryWithIcons: [
          {
            uriIcon: "octocat.svg",
            name: "Custom Compiler",
            url: "https://github.com/JavierAPalaciosL/custom-compiler.git"
          }
        ]
      }
,
    ]
  }

  ngAfterViewInit(): void {

    console.log("App Component loaded");

    }


  public onToogle($event: boolean): void {
    console.log('onToogle', $event.valueOf());

    document.documentElement.setAttribute('data-theme', $event ? 'dark' : 'light');

  }

  onVisible($event: ProjectSelected) {
    console.log('onVisible', $event.writableSignal().valueOf());
    this.isVisible = $event.writableSignal;
    this.projectSelected.set($event.projectSelect);
  }

  closeElement() {
    this.isVisible.set(false);
  }

  prev(carousel: HTMLElement) {
    const first = carousel.querySelector<HTMLElement>('.carousel-item');
    const gap   = parseInt(getComputedStyle(carousel).gap || '0', 10);
    const w     = first ? first.offsetWidth + gap : 0;
    carousel.scrollBy({ left: -w, behavior: 'smooth' });
  }

  next(carousel: HTMLElement) {
    const first = carousel.querySelector<HTMLElement>('.carousel-item');
    const gap   = parseInt(getComputedStyle(carousel).gap || '0', 10);
    const w     = first ? first.offsetWidth + gap : 0;
    carousel.scrollBy({ left:  w, behavior: 'smooth' });
  }

}
